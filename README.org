* Deliverable
  - Edit: [[https://stackblitz.com/edit/github-wgdnbn]]
  - Page: [[https://github-wgdnbn.stackblitz.io]]
* Table of Contents                                                   :TOC_2:
- [[#deliverable][Deliverable]]
- [[#requirements][Requirements]]
- [[#summary][Summary]]
  - [[#required-elements-are-grouped-inside-toolbar-using-components-from-ngbootstrap-44100][Required elements are grouped inside toolbar using components from ngbootstrap]]
  - [[#configurable-by-edit-a-json-file-at-srcapptoolbartoolbarconfigjson][Configurable by edit a JSON file at ./src/app/toolbar/toolbarConfig.json]]
  - [[#ability-to-add-more-than-one-of-each-kind-of-child-component][Ability to add more than one of each kind of child component]]
  - [[#reusability][Reusability]]
  - [[#extensibility][Extensibility]]
  - [[#ui-design][UI Design]]

* Requirements
  1) Reusable Toolbar Component
  2) Drop down selector (E.G. selecting a font)
  3) A button with state (E.G. a "Bold" button)
  4) A group of buttons that only allow one to be selected (E.G. left / center / right align)
  5) A button that links to another URL location
  6) Configurable by editing a JSON file
  7) Ability to extend to act on the page down the line
* Summary
** Required elements are grouped inside toolbar using components from [[https://ng-bootstrap.github.io/#/components/alert/examples][ngbootstrap]] [4/4][100%]
	+ [X] Drop down, selector; under ./src/app/drop-down/
	+ [X] Button with state; under ./src/app/state-button/
	+ [X] Group of buttons that only allow one to be selected; under ./src/app/radio-buttons/
	+ [X] Button that links to another URL location; under ./src/app/url-button/
** Configurable by edit a JSON file at ./src/app/toolbar/toolbarConfig.json
*** dropDown
	  1) .dropDown.title: text that display before clicking
	  2) .dropDown.selectors: array of selectors to display after clicking
	  3) .dropDown.selectors.text: text of selectors
*** stateButton
	  1) .title: text display on the button
*** radioButtons
	  1) .radioButtons: array of buttons to display in the button group
	  2) .radioButtons.title: text to display on the button
	  3) .radioButtons.value: value that get passed when clicked (default to .title for now)
*** urlButtons
	  1) .urlButtons.title: text to display on the button
	  2) .urlButtons.url: url that the button links to
** Ability to add more than one of each kind of child component
    + Make toolbarItems inside toolbarConfig.json an array; each array element has two members: type of element and element config
	+ Toolbar HTML template will use [ngSwitch] and *ngSwitchCase to render all the elements in toolbar as specified in config
	+ This capability is demonstrated by the two state-buttons that toggles bold/italicized; or the two url-buttons that links to different places.
** Reusability
	+ Json file should *only* store view information (what you can see), not any application logic
	+ All the onClick event of the child components (dropdown, button, radio) are extracted onto parent components
	  1) The above is accomplished using Angular's Output and EventEmitter
	  2) Whenever components got clicked, a message will be sent from the parent (toolbar) to show control over the event on the higher level
	+ Great usability because state and application logic can be configured in the toolbar component alone without touching any child components
** Extensibility
	+ Since all onClick events can be configure in the top toolbar component, extending toolbar to act on the page is easy: just replace console.log line with code that wants executed
	+ Demonstrated by how toolbar can act on a sibling component: ./src/app/simple-text; text toggles bold/italicized whenever corresponding state-button is clicked.
** UI Design
   - Use image instead of text for state-buttons and radio-buttons; add img field for location of image in json config
   - Keep all elements simple: dark text on light background for easy readability
   - Add spacing between group of elements; Ability for elements to align left or right
   - CSS style simple-text element to be more appropriately placed on the page
