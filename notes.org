* Requirement
  1) Reusable Toolbar Component
	 - Toolbar meaning a navigation bar?
  2) Drop down selector (E.G. selecting a font)
  3) A button with state (E.G. a "Bold" button)
  4) A group of buttons that only allow one to be selected (E.G. left / center / right align)
  5) A button that links to another URL location
  6) Configurable by editing a JSON file
* Resource
  - [[https://ng-bootstrap.github.io/#/home][Angular Powered Bootstrap]]
  - [[https://angular.io/tutorial][Angular Tour-of-Hero Tutorial]]
  - [[https://getbootstrap.com/docs/4.3/getting-started/introduction/][Bootstrap 4 Documentation]]
  - 
  - 
* Ideas
  1) Toolbar component, integrating bunch of umbrella smaller component satisfying the above requirements
  2) Toolbar component, with everything implemented in itself
  3) End results
  4) How generalize should it be? 
  5) Create library so everybody can use it
  6) Need to brush up on Angular Databinding Syntax, [], (), [()]

* Drop-down Selector
  - Let's start with Drop-down Selector
  - 


* Logs  
** Set up ng-boostrap
  1) Install ng-bootstrap
	 #+begin_src shell
	 npm install --save @ng-bootstrap/ng-bootstrap
	 #+end_src
  2) Import to main module
	 #+LOCATION: ./src/app/app.module.ts
	 #+begin_src javascript
	   import {NgbModule} from '@ng-bootstrap/ng-bootstrap';

	   @NgModule({
		 ...
		 imports: [NgbModule, ...],
		 ...
	   })
	   export class YourAppModule {
	   }
	 #+end_src
  3) Add Bootstrap CSS
	 - Install through npm
	   #+begin_src shell
		 npm install --save bootstrap
   	   #+end_src
	 - Import in app
	   #+LOCATION: ./src/styles.css
	   #+begin_src css
		 @import "~bootstrap/dist/css/bootstrap.css";
	   #+end_src
	   
** Navi + Drop-down Experiment
   1) Create drop-down component
   2) Copy and Paste html from ng-bootstrap [[https://ng-bootstrap.github.io/#/components/dropdown/examples][dropdown site]]
   3) Create tool-bar component
   4) Incorporate drop-down in toolbar html template
   5) Everything shows. Now how do we configure this drop-down effectively from toolbar?
** Dropdown Customization
*** Goal
   1) Aim is to customize the selectors inside Drop-down
   2) Approach: @input or encode all customization in 
*** @input approach (hard-coded)
	1) Add @Input() in drop-down class & Use it in HTML template {{option}}
	   #+begin_src typescript
		 @Input() option: String
	   #+end_src
	2) Pass parameter down from Toolbar (Parent Component)
	   #+begin_src html
		 <app-drop-down [option]="'seek'"></app-drop-down>
	   #+end_src
	3) More general, pass down an array declared and defined in Toolbar.ts (Parent)
	   #+begin_src javascript
		 selectors: string[] = ['Test1', 'Test2', 'Test2']
	   #+end_src
	   #+begin_src html
		 <app-drop-down [selectors]="selectors"></app-drop-down>
	   #+end_src
	4) Add *ngFor to iterate through array in drop-down.html 
	   #+begin_src html
		 <button *ngFor="let selector of selectors" ngbDropdownItem>{{selector}}</button>
	   #+end_src
*** @json approach (configuration-file)
	1) Import config.json file in toolbar
	   #+begin_src javascript
		 import * as config from './toolbar_config.json';
	   #+end_src
	2) Add compiler option in tsconfig.json for parsing json
	   #+begin_src javascript
		 {
			 "compileroptions": {
				 "resolvejsonmodule": true,
				 "esmoduleinterop": true,
				 "allowsyntheticdefaultimports": true
			 }
		 }
	   #+end_src
	3) Pass configuration down from toolbar to drop-down
	   #+begin_src typescript
		   dropdown_config: any = config.dropdown
		 // In html template
		   <app-drop-down [title]="dropdown_config.title" [selectors]="dropdown_config.selectors"></app-drop-down>
	   #+end_src
    4) Adjust accordingly in drop-down component

** State Button	
*** Goal
	1) Get clickable button on the page
	2) Pass in onClick function from Parent (toolbar) for state change
	   + For starter, a function that just shows pop up messages when clicked
	3) configure.json that configure the button's display text (e.g. Bold / Italics)jjj
*** Get button on page	   
	1) Add associated html template in button, copy from [[https://ng-bootstrap.github.io/#/components/buttons/examples][bootstrap Angular Site]]
	   #+begin_src html
		 <label class="btn-primary" ngbButtonLabel>
		   <input type="checkbox" ngbButton [(ngModel)]="state"> Bold
		 </label>
	   #+end_src
	2) "Can't bind to ngModel error": Import Form modules per instruction from [[https://angular.io/tutorial/toh-pt1][Angular Tutorial Site]]
	   #+LOCATION: app.module.ts
	   #+begin_src typescript
		 import { FormsModule } from '@angular/forms'; // <-- NgModel lives here
		 // Add it to @NgModule metadata's imports array
		 imports: [
		   BrowserModule,
		   FormsModule
		 ],
	   #+end_src
*** Add onClick() method, to catch state change when clicked
	#+begin_src typescript
	  export class StateButtonComponent implements OnInit {
	  state: boolean = false;
	  onSelect(): void {
		  console.log(this.state);
	  }
	  }
	  // Add (click) directive in html template
	  <input [(ngModel)]="state" (click)="onSelect()" type="checkbox" ngbButton> Bold
	#+end_src
	
*** Extract click event to Parent Component, to make state-button "dumb"
	1) Research and Learn EventEmitter and Output directive according to this [[https://angular.io/guide/component-interaction#parent-listens-for-child-event][Angular tutorial]]
	2) Import EventEmitter & Output, then use them in child component
	   #+LOCATION: state-button.component.ts
	   #+begin_src typescript
		 import { Component, OnInit, EventEmitter, Output } from '@angular/core';
		 export class StateButtonComponent implements OnInit {
		   @Input() title: string;
		   @Output() clicked = new EventEmitter<boolean>();
		   state: boolean = false;
		   onSelect(): void {
			 console.log(this.state);
			 this.clicked.emit(!this.state);
		   }
	   #+end_src
    3) Configuration in Parent component
	   #+begin_src typescript
		 button_onClicked(button_state: boolean) {
		   if (button_state) {
			 console.log("button clicked");
		   } else {
			 console.log("button unclicked");
		   }
		 }
		 // In HTML template
		 <app-state-button (clicked)="button_onClicked($event)"></app-state-button>
	   #+end_src

*** Configure.json for state button
	1) Text display on the button
	   #+begin_src typescript
		 {
		   "state_button": {
			 "title": "Bold"
		   }
		 }
	   #+end_src
    2) Adjust parent and child component accordingly to incorporate customization

** Radio Buttons
*** Goals   
	1) Hardcode arbitrary Radio Buttons so that it appears on the page

	2) Extract onClick() event to Parent (toolbar)
	   
	3) Implement configuration from Json, that controls the text on each radio buttons, and arbitrary# of them 
*** Radio Buttons Hard Code
	1) Copy code from [[https://ng-bootstrap.github.io/#/components/buttons/examples][Angular Bootstrap Radio Button]]
	   #+begin_src typescript
		 // In TS
		 export class RadioButtonsComponent implements OnInit {
		   model: any = 1;
		   constructor() { }

		   ngOnInit() {
		   }
		 // In HTML template
		 <div class="btn-group btn-group-toggle" ngbRadioGroup name="radioBasic" [(ngModel)]="model">
		   <label ngbButtonLabel class="btn-light">
			 <input ngbButton type="radio" [value]="1"> Left (pre-checked)
		   </label>
		   <label ngbButtonLabel class="btn-light">
			 <input ngbButton type="radio" value="middle"> Middle
		   </label>
		   <label ngbButtonLabel class="btn-light">
			 <input ngbButton type="radio" [value]="false"> Right
		   </label>
		 </div>
	   #+end_src
*** Extract onClick event to Parent
	#+LOCATIONS: radio-buttons
	#+begin_src typescript
	  import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
	  export class RadioButtonsComponent implements OnInit {
		@Input() config: any;
		@Output() clicked = new EventEmitter<string>();
		model: any;
		onClick(value: string): void {
		  console.log(value);
		  this.clicked.emit(value);
		}
	  }
	  // HTML
	  <label *ngFor="let button of config" ngbButtonLabel class="btn-light">
	    <input (click)="onClick(button.value)" ngbButton type="radio" [value]="button.value"> {{button.title}}
	  </label>
	#+end_src
	#+LOCATIONS: toolbar
	#+begin_src typescript
	  radio_onClicked(value: string) {
		console.log(value);
		}
	  // HTML
		<app-radio-buttons [config]="radio_buttons_config" (clicked)="radio_onClicked($event)"></app-radio-buttons>
	#+end_src
*** Configuration from Json
	1) Json structure design
	   #+begin_src typescript
		 radio_buttons_config: any = config.radio_buttons;
		 "radio_buttons": [
			 {
				 "title": "left",
				 "value": "left"
			 },
			 {
				 "title": "middle",
				 "value": "middle"
			 },
			 {
				 "title": "right",
				 "value": "right"
			 }
		 ]
	   #+end_src
** URL Button	   
*** Goals   
	1) Create Component and Hardcode the link in
	2) Implement configuration where it link to
*** Hardcode button 
	1) Use bootstrap button
	   #+begin_src typescript
<a class="btn btn-primary" href="#" role="button">Link</a>
	   #+end_src
    2) Create variable where it link to
* Some key insights
  - Some criterion for Re-usable components?
	1) Should consist mostly dumb components, with no application logic
  - How generalize should I make this toolbar?
	1) Drop-down
	   - # of selectors
	   - Name of selectors (Helvetica, Times New Roman, etc.)
	   - title of the dropdown (Select Font)
	   - Maybe configure action function in the future?
	   - Answers: configure.json should only be used for data-related configuration, no app logic should be included
    2) Action function should always be extract to the toolbar Parent component for easy configuration
	   - Make most components as dumb as possible
	   - Concentrate all the logics in the root component (Toolbar) 
